name: Claude PR Review (Alternative)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: number

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Setup PR Number
        id: pr
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Fetch PR details
        id: pr_details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.pr.outputs.number }}
            });
            
            // Get file changes
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.pr.outputs.number }}
            });
            
            return {
              title: pr.data.title,
              body: pr.data.body || '',
              files: files.data.map(f => ({
                filename: f.filename,
                status: f.status,
                additions: f.additions,
                deletions: f.deletions
              }))
            };
            
      - name: Trigger Claude review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prData = ${{ steps.pr_details.outputs.result }};
            
            const comment = `@claude Please review PR #${{ steps.pr.outputs.number }}
            
            **Title:** ${prData.title}
            **Description:** ${prData.body}
            
            **Changed files:**
            ${prData.files.map(f => `- ${f.filename} (+${f.additions} -${f.deletions})`).join('\n')}
            
            Please analyze:
            1. Code quality and best practices
            2. Security implications
            3. Performance considerations
            4. Home Assistant Add-on conventions
            5. Potential bugs or issues
            
            Focus on Python code quality, error handling, and maintainability.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr.outputs.number }},
              body: comment
            });