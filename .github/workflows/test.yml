name: Test

on:
  push:
    branches: [ main, next-release ]
  pull_request:
    branches: [ main, next-release ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: true
      max-parallel: 1

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install flake8 mypy black isort
    
    - name: Lint with flake8
      run: |
        # Stop build on Python syntax errors or undefined names
        flake8 custom_components --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 custom_components --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Check formatting with black
      run: |
        black --check custom_components tests
    
    - name: Check import order with isort
      run: |
        isort --check-only custom_components tests
    
    - name: Type check with mypy
      run: |
        mypy custom_components
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=custom_components.entity_manager --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  validate:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate with HACS
      uses: hacs/action@main
      with:
        category: integration
        ignore: brands
    
    - name: Validate manifest
      run: |
        python -m json.tool custom_components/entity_manager/manifest.json > /dev/null